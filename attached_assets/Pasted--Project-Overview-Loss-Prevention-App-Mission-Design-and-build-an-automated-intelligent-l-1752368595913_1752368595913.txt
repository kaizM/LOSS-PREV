**Project Overview: Loss Prevention App**

**Mission:**
Design and build an automated, intelligent loss prevention system for retail or gas station environments that integrates POS data (Gilbarco registers with Modisoft back office) and Alibi surveillance cameras. The system will detect suspicious transactions, capture related video footage, and allow managers to review and receive alerts with minimal manual effort.

---

**Core Objectives:**

1. **Automated POS Data Handling**

   * Source: Gilbarco registers synced with Modisoft (via API, scheduled export, or daily file uploads).
   * Detect suspicious transaction types:

     * Refunds
     * Voids
     * No Sales
     * Suspended Transactions
     * Cancellations
     * Manual Discounts
     * Employee overrides or repeated patterns
   * Upload or fetch reports automatically at scheduled times (e.g., end-of-day).

2. **Video Capture and DVR Integration**

   * **Challenge:** Alibi DVRs are local devices not natively cloud-accessible.
   * **Solutions:**

     * **Client Server (Preferred):** Set up a lightweight Windows/Linux server on-site that runs:

       * Alibi Witness (GUI or CLI, if supported)
       * Local automation script using task scheduler or service to:

         * Pull saved video clips
         * Interact with Alibi's local file system or use headless screen automation (AutoHotKey/PyAutoGUI) if needed
     * **VPN Tunnel:** Use ZeroTier or Tailscale to allow cloud app to access local DVR using RTSP port 554
     * **Hybrid Fallback:** Have DVR auto-record to a shared folder, then scan and pull MP4 clips based on time ranges
   * Capture 3-minute clip for each flagged transaction:

     * 1 minute before
     * 2 minutes after
   * Clip naming convention: `storeID_date_time_register_eventType.mp4`

3. **Web Dashboard (Manager View)**

   * Upload and view flagged POS transactions
   * Play corresponding video clips from cloud/local
   * Allow tagging: Approved / Investigate / Escalate
   * Add internal notes
   * Responsive UI (works on mobile/tablet)
   * Color-coded alerts by severity (e.g., red for refund > \$100)
   * Filtering by employee, transaction type, time range
   * Direct access — no login, simple entry to main dashboard

4. **Alerts and Reporting**

   * Automated email/SMS summary daily
   * Real-time rule-based alerts:

     * ">3 No Sales in 5 mins"
     * "Refund > \$50"
   * Historical logs, searchable by:

     * Date, register, employee, type
   * Weekly/monthly trend analytics
   * Alert escalation levels (warning → review → critical)

5. **AI-Powered Assistance (Optional Phase 2)**

   * Face detection: Is customer present?
   * Movement recognition: Did drawer open?
   * Anomaly detection with OpenCV or YOLO
   * Visual summary for quick decisions
   * Behavior clustering (frequent voids by employee X)

6. **New Additions (Future Enhancements)**

   * **Voice-to-text manager notes**: Add quick reviews via dictation
   * **License plate reader support** for drive-offs (gas station use case)
   * **Employee performance tracker** based on event types
   * **QR-code based login tagging** for POS events and accountability
   * **Automated camera fail-check**: Ping system alerts if a camera stops responding
   * **Biometric camera integration** (optional facial logging for sensitive sites)

---

**Technical Stack & Architecture**

* **Frontend**

  * React.js or HTML + Tailwind (Replit friendly)
  * Embedded video player, filters, and alert panels

* **Backend**

  * FastAPI or Flask (Python) or Node.js + Express (JS-based stack for Replit)
  * REST endpoints for uploading data, clips, notes
  * File watcher or cron jobs for local syncing

* **Database**

  * PostgreSQL (cloud) or SQLite (local-only version)
  * Tables:

    * `transactions`, `video_clips`, `alerts`, `notes`

* **Video Tools**

  * `ffmpeg` for video slicing based on timestamp
  * OpenCV for later visual analysis

* **Security**

  * Simple open-access dashboard for now (no user login)
  * VPN or LAN-only access to DVR if needed

---

**Deployment Strategy (Including Free Cloud Hosting)**

| Setup Option            | Description                                                               |
| ----------------------- | ------------------------------------------------------------------------- |
| **Replit (Free Cloud)** | Host full app frontend/backend with public access and storage limits      |
| **Local Store PC**      | Full system runs locally; best for stores with no IT staff                |
| **Client Server**       | Alibi DVR + automation script fetches video and pushes to cloud/dashboard |
| **Hybrid with VPN**     | Replit UI accesses local DVR via Tailscale or ZeroTier tunnel             |
| **Manual Upload**       | Manager uploads DVR clips and POS data; ideal for low-volume testing      |

---

**Step-by-Step Rollout Plan**

**Phase 1: MVP**

* Upload POS report → detect and flag transactions
* Allow manual upload of video clip (drag/drop)
* Review dashboard with filter and notes

**Phase 2: Camera Integration**

* Script to sync video files based on time
* Local Alibi client with automation (AutoHotKey or Python GUI automation)
* Save matched video into clip library

**Phase 3: Alerts & Automation**

* Rule-based alerts
* Daily automated report
* Manager dashboard alert panel

**Phase 4 (Optional): AI Video Review**

* Train models to flag visual events
* Motion/no-person detection
* Predictive scoring

**Phase 5 (Optional): Intelligent Insights**

* Alert escalation workflows
* Employee heatmaps based on risk flags
* Voice feedback analysis
* Smart alerts combining visual + transactional patterns

---

**Summary**
This project will save time, reduce loss, and empower managers with actionable visual intelligence. It blends real-time POS data with secure camera monitoring and a powerful dashboard, expandable with AI and automation to future-proof your store’s operations. A free cloud deployment via Replit ensures cost-effective access and rapid prototyping.

This strategic document can be pasted directly into Replit, GitHub, or Notion as your working blueprint. Ready to start coding or need UI wireframes next?
